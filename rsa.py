import random
import math_funcs

from message import Message, Data


def gen_rsa_keys(p: int, q: int) -> tuple[tuple[int, int], tuple[int, int]]:
    """
    Returns a public and private key generated by
        https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Key_generation
    """

    n = p * q
    totient = math_funcs.lcm(p-1, q-1)
    e_choices = [i for i in range(1, totient) if math_funcs.is_coprime(i, totient)]
    e = random.choice(e_choices)
    d = math_funcs.mod_mul_inv(e, totient)

    pub_key = (n, e)
    priv_key = (n, d)

    return (pub_key, priv_key)

def rsa_encrypt(mes: Message, pub_key: tuple[int, int]) -> Message:
    """
    Returns `mes` encrypted with `pub_key`.
    """

    n, e = pub_key

    return Message(
        mes.mes_purpose,
        mes.sender,
        mes.recipient,
        type(mes.content)([pow(m, e, n) for m in mes.content]),
        metadata=Data([pow(m, e, n) for m in mes.metadata]),
        is_encrypted=True,
    )

def rsa_decrypt(mes: Message, priv_key: tuple[int, int]) -> Message:
    """
    Returns `mes` decrypted with `pub_key`.
    """

    n, d = priv_key

    return Message(
        mes.mes_purpose,
        mes.sender,
        mes.recipient,
        type(mes.content)([pow(m, d, n) for m in mes.content]),
        metadata=Data([pow(m, d, n) for m in mes.metadata]),
    )
