import random
import math_funcs

from message import Message, Data


def gen_keys(p: int, q: int) -> tuple[tuple[int, int], tuple[int, int]]:
    """
    Returns a public and private key generated by
        https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Key_generation
    """

    n = p * q
    totient = math_funcs.lcm(p-1, q-1)
    e_choices = [i for i in range(1, totient) if math_funcs.is_coprime(i, totient)]
    e = random.choice(e_choices)
    d = math_funcs.mod_mul_inv(e, totient)

    pub_key = (n, e)
    priv_key = (n, d)

    return (pub_key, priv_key)

def encrypt(mes: Message, pub_key: tuple[int, int]) -> Message:
    """
    Returns `mes` encrypted with `pub_key`.
    """

    n, e = pub_key
    print(f"[rsa] {n=}, {e=}")
    plaintext = [ord(m) for m in mes.content]
    print(f"[rsa] {plaintext=}")
    ciphertext = [pow(m, e, n) for m in plaintext]
    print(f"[rsa] {ciphertext=}")

    return Message(
        mes.mes_purpose,
        mes.sender,
        type(mes.content)(ciphertext),
        chat_name=mes.chat_name,
        views=mes.views,
        is_encrypted=True,
    )

def decrypt(mes: Message, priv_key: tuple[int, int]) -> Message:
    """
    Returns `mes` decrypted with `pub_key`.
    """

    n, d = priv_key
    print(f"[rsa] {n=}, {d=}")
    ciphertext = [ord(m) for m in mes.content]
    print(f"[rsa] {ciphertext=}")
    plaintext = [pow(m, e, n) for m in ciphertext]
    print(f"[rsa] {plaintext=}")

    return Message(
        mes.mes_purpose,
        mes.sender,
        type(mes.content)(plaintext),
        chat_name=mes.chat_name,
        views=mes.views,
    )
